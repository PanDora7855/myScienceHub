import styles from './ProfileOverview.module.scss';
import Article from '../../../article/components/Article/Article';
import { useProfileById } from '../../useProfileById';
import { useParams, NavLink } from 'react-router';
import { useProfile } from '../../useProfile';
import { IArticle } from '../../../../helpers/interfaces';
import Button from '../../../../components/Button/Button';
import { useState } from 'react';
import { useSubscribeMutation, useUnsubscribeMutation } from '../../useSubscribeMutation';
import { useGetLastPublicationsMutation } from '../../useGetLastPublicationsMutation';

const ProfileOverview = () => {
	const { authorId } = useParams();
	const { data, isLoading: profileLoading } = useProfileById(authorId as string);
	const { data: currentUserData } = useProfile();
	const { downloadFile, isLoading } = useGetLastPublicationsMutation();
	const newDataPublications = data?.Profile.Publications?.slice(0, 2);

	const subscribeMutation = useSubscribeMutation(authorId as string);
	const unsubscribeMutation = useUnsubscribeMutation(authorId as string);

	const [isSubscribed, setIsSubscribed] = useState<boolean>(false);

	const handleSubscribe = () => {
		setIsSubscribed(true);
		subscribeMutation.mutate();
	};

	const handleUnsubscribe = () => {
		setIsSubscribed(false);
		unsubscribeMutation.mutate();
	};

	const [countPublications, setCountPublications] = useState(10);
	const [dateStart, setDateStart] = useState('');
	const [dateEnd, setDateEnd] = useState('');
	const [fileType, setFileType] = useState(0);

	const handleDownload = () => {
		downloadFile(countPublications, new Date(dateEnd), new Date(dateStart), fileType);
	};

	if (profileLoading) {
		return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
	}

	if (!data?.Profile) {
		return <div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
	}

	const isOwnProfile = currentUserData?.id === data.Profile.id;

	return (
		<div className={styles['container']}>
			<div className={styles['top']}>
				<div className={styles['top-left']}>
					<div className={styles['name']}>
						<h2>
							{data.Profile.last_name} {data.Profile.first_name} {data.Profile.middle_name}
						</h2>
					</div>
					<div className={styles['id']}>
						<p>ID: {data.Profile.id}</p>
					</div>
					<div className={styles['status']}>
						<p>–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å: {data.Profile.academic_degree ?? '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
					</div>
					<div className={styles['vac']}>
						<p>–í–ê–ö: {data.Profile.vac.length > 0 ? data.Profile.vac : '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
					</div>
					<div className={styles['id']}>
						<p>–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data.Profile.appointment}</p>
					</div>
					<div className={styles['id']}>
						<p>–°—Ç—Ä–∞–Ω–∞: {data.Profile.country}</p>
					</div>
					<div className={styles['id']}>
						<p>–°—Ç—Ä–∞–Ω–∞: {data.Profile.gender}</p>
					</div>
					<div className={styles['follows']}>
						{isOwnProfile ? (
							<>
								<NavLink to='/subscribes' className={styles['follow-link']}>
									<div className={styles['follow']}>
										{data.Profile.MySubscribesList?.length || 0} –ø–æ–¥–ø–∏—Å–æ–∫
									</div>
								</NavLink>
								<NavLink to='/subscribers' className={styles['follow-link']}>
									<div className={styles['following']}>
										{data.Profile.SubscribersList?.length || 0} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
									</div>
								</NavLink>
							</>
						) : (
							<>
								<div className={styles['follow']}>
									{data.Profile.MySubscribesList?.length || 0} –ø–æ–¥–ø–∏—Å–æ–∫
								</div>
								<div className={styles['following']}>
									{data.Profile.SubscribersList?.length || 0} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
								</div>
							</>
						)}
					</div>
					{!isOwnProfile &&
						(isSubscribed ? (
							<Button className='red' onClick={() => handleUnsubscribe()}>
								–û—Ç–ø–∏—Å–∞—Ç—å—Å—è
							</Button>
						) : (
							<Button className='purple' onClick={() => handleSubscribe()}>
								–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
							</Button>
						))}
				</div>
				<div className={styles['top-right']}>
					<div className={styles['filters']}>
						<h3>–§–∏–ª—å—Ç—Ä—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π</h3>
						<div className={styles['filters__row']}>
							<div className={styles['filters__field']}>
								<p>–ö–æ–ª-–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</p>
								<input
									type='number'
									min='1'
									value={countPublications}
									onChange={(e) => setCountPublications(+e.target.value)}
								/>
							</div>
							<div className={styles['filters__field']}>
								<p>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</p>
								<input type='date' value={dateStart} onChange={(e) => setDateStart(e.target.value)} />
							</div>
							<div className={styles['filters__field']}>
								<p>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</p>
								<input type='date' value={dateEnd} onChange={(e) => setDateEnd(e.target.value)} />
							</div>
							<div className={styles['filters__field']}>
								<p>–¢–∏–ø —Ñ–∞–π–ª–∞:</p>
								<select value={fileType} onChange={(e) => setFileType(+e.target.value)}>
									<option value='0'>Word</option>
									<option value='1'>Excel</option>
									<option value='2'>LibraWord</option>
									<option value='3'>LibraExcel</option>
								</select>
							</div>
						</div>
						{isLoading ? (
							<button className={styles['filters__button']} disabled>
								<div className={styles['loading-spinner']}></div>
							</button>
						) : (
							<button className={styles['filters__button']} onClick={handleDownload}>
								üì• –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
							</button>
						)}
					</div>
				</div>
			</div>
			<div className={styles['bottom']}>
				<h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</h2>
				<div className={styles['publications']}>
					{data.Profile.Publications && data.Profile.Publications.length > 0 ? (
						newDataPublications?.map((article: IArticle) => (
							<div className={styles['publication']} key={article.id}>
								<Article props={article} />
							</div>
						))
					) : (
						<p>–ü—É—Å—Ç–æ</p>
					)}
				</div>
			</div>
		</div>
	);
};

export default ProfileOverview;
